import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './ResponseDisplay.css';

const ResponseDisplay = ({ message, boards, selectedBoard }) => {
  const navigate = useNavigate();
  const [showActions, setShowActions] = useState(false);
  
  // Handle when user accepts to run analysis
  const handleRunAnalysis = () => {
    if (selectedBoard) {
      navigate(`/analyze/${selectedBoard.id}`);
    }
  };
  
  // Handle board selection for analysis
  const handleBoardSelect = (boardId) => {
    navigate(`/analyze/${boardId}`);
  };
  
  // Handle visualization display
  const handleViewVisualization = (visualizationType, boardId) => {
    navigate(`/visualize/${boardId}?type=${visualizationType}`);
  };
  
  // Handle workspace creation
  const handleCreateWorkspace = (workspaceDetails) => {
    navigate('/create-workspace', { state: { workspaceDetails } });
  };
  
  if (message.isProcessing) {
    return (
      <div className="assistant-message-content processing">
        <div className="processing-indicator">
          <div className="typing-indicator">
            <span></span>
            <span></span>
            <span></span>
          </div>
          <p>{message.text}</p>
        </div>
      </div>
    );
  }
  
  if (message.isError) {
    return (
      <div className="assistant-message-content error">
        <div className="error-icon">
          <i className="exclamation-icon"></i>
        </div>
        <p>{message.text}</p>
      </div>
    );
  }
  
  return (
    <div className="assistant-message-content">
      <div className="assistant-icon">
        <i className="ai-icon"></i>
      </div>
      
      <div className="message-body">
        <div className="message-text">
          {message.text.split('\n').map((line, i) => (
            <p key={i}>{line}</p>
          ))}
        </div>
        
        {message.actions && message.actions.length > 0 && (
          <div className="message-actions">
            <button 
              className="toggle-actions-btn"
              onClick={() => setShowActions(!showActions)}
            >
              {showActions ? 'Hide Actions' : 'Show Actions'}
            </button>
            
            {showActions && (
              <div className="actions-container">
                {message.actions.map((action, index) => {
                  switch (action.type) {
                    case 'run_analysis':
                      return (
                        <button 
                          key={index} 
                          className="action-btn analysis-btn"
                          onClick={handleRunAnalysis}
                        >
                          Run Workflow Analysis
                        </button>
                      );
                      
                    case 'select_board':
                      return (
                        <div key={index} className="board-selection">
                          <p>Select a board to analyze:</p>
                          <div className="board-options">
                            {boards && boards.map(board => (
                              <button 
                                key={board.id}
                                className="board-option-btn"
                                onClick={() => handleBoardSelect(board.id)}
                              >
                                {board.name}
                              </button>
                            ))}
                          </div>
                        </div>
                      );
                      
                    case 'view_visualization':
                      return (
                        <button 
                          key={index} 
                          className="action-btn visualization-btn"
                          onClick={() => handleViewVisualization(action.visualizationType, action.boardId)}
                        >
                          View {action.visualizationType} Visualization
                        </button>
                      );
                      
                    case 'create_workspace':
                      return (
                        <button 
                          key={index} 
                          className="action-btn workspace-btn"
                          onClick={() => handleCreateWorkspace(action.workspaceDetails)}
                        >
                          Create Workspace
                        </button>
                      );
                      
                    default:
                      return (
                        <button 
                          key={index} 
                          className="action-btn generic-btn"
                          onClick={() => console.log('Action clicked:', action)}
                        >
                          {action.label || 'Perform Action'}
                        </button>
                      );
                  }
                })}
              </div>
            )}
          </div>
        )}
        
        {message.visualizations && message.visualizations.length > 0 && (
          <div className="message-visualizations">
            {message.visualizations.map((visualization, index) => {
              switch (visualization.type) {
                case 'bottleneck_chart':
                  return (
                    <div key={index} className="visualization-container bottleneck-viz">
                      <h3>{visualization.title || 'Bottleneck Analysis'}</h3>
                      <div className="bottleneck-preview">
                        {/* Simplified visualization preview */}
                        <div className="bottleneck-bars">
                          {visualization.data.map((item, i) => (
                            <div key={i} className="bottleneck-bar-container">
                              <div className="bottleneck-label">{item.status}</div>
                              <div className="bottleneck-bar-wrapper">
                                <div 
                                  className="bottleneck-bar"
                                  style={{ 
                                    width: `${(item.value / Math.max(...visualization.data.map(d => d.value))) * 100}%`,
                                    backgroundColor: i < 2 ? '#ff5252' : '#4caf50'
                                  }}
                                >
                                  {item.value} hrs
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                        <button 
                          className="view-full-viz-btn"
                          onClick={() => handleViewVisualization('bottleneck', selectedBoard?.id)}
                        >
                          View Full Analysis
                        </button>
                      </div>
                    </div>
                  );
                  
                case 'workload_distribution':
                  return (
                    <div key={index} className="visualization-container workload-viz">
                      <h3>{visualization.title || 'Team Workload Distribution'}</h3>
                      <div className="workload-preview">
                        {/* Simplified visualization preview */}
                        <div className="workload-bars">
                          {visualization.data.slice(0, 5).map((item, i) => (
                            <div key={i} className="workload-bar-container">
                              <div className="workload-label">{item.name}</div>
                              <div className="workload-bar-wrapper">
                                <div 
                                  className="workload-bar"
                                  style={{ 
                                    width: `${(item.value / Math.max(...visualization.data.map(d => d.value))) * 100}%`
                                  }}
                                >
                                  {item.value}
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                        <button 
                          className="view-full-viz-btn"
                          onClick={() => handleViewVisualization('workload', selectedBoard?.id)}
                        >
                          View Full Distribution
                        </button>
                      </div>
                    </div>
                  );
                  
                case 'status_flow':
                  return (
                    <div key={index} className="visualization-container flow-viz">
                      <h3>{visualization.title || 'Status Flow Visualization'}</h3>
                      <div className="flow-preview">
                        {/* Simplified flow preview - just show icon */}
                        <div className="flow-icon"></div>
                        <p>Flow visualization shows how work items move between statuses</p>
                        <button 
                          className="view-full-viz-btn"
                          onClick={() => handleViewVisualization('flow', selectedBoard?.id)}
                        >
                          View Full Flow Diagram
                        </button>
                      </div>
                    </div>
                  );
                  
                default:
                  return (
                    <div key={index} className="visualization-container generic-viz">
                      <h3>{visualization.title || 'Data Visualization'}</h3>
                      <button 
                        className="view-full-viz-btn"
                        onClick={() => handleViewVisualization(visualization.type, selectedBoard?.id)}
                      >
                        View Visualization
                      </button>
                    </div>
                  );
              }
            })}
          </div>
        )}
      </div>
    </div>
  );
};

export default ResponseDisplay;